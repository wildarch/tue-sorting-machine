\documentclass[a4paper,oneside,11pt]{article}
\usepackage{a4wide,graphicx,fancyhdr,amsmath,amssymb}

%-------- Macros and Definitions --------%

\setlength\headheight{20pt}
\addtolength\topmargin{-10pt}
\addtolength\footskip{20pt}

\newcommand{\subject}{2IO70 embedded systems}

\newcommand{\N}{\mathbb{N}}
\newcommand{\ch}{\mathcal{CH}}

\newcommand{\naam}{Reinhard Heinrich Bertram Vinzenz Freiherr von Pelden genannt Cloudt zu Lauersfort und Impel}

\fancypagestyle{plain}{%
\fancyhf{}
\fancyhead[LO,RE]{\sffamily\bfseries\large technische universiteit eindhoven}
\fancyhead[RO,LE]{\sffamily\bfseries\large \subject}
\fancyfoot[LO,RE]{\sffamily\bfseries\large department of mathematics and computer science}
\fancyfoot[RO,LE]{\sffamily\bfseries\thepage}
\renewcommand{\headrulewidth}{0pt}
\renewcommand{\footrulewidth}{0pt}
}

\pagestyle{fancy}
\fancyhf{}
\fancyhead[RO,LE]{\sffamily\bfseries\large technische universiteit eindhoven}
\fancyhead[LO,RE]{\sffamily\bfseries\large \subject}
\fancyfoot[LO,RE]{\sffamily\bfseries\large department of mathematics and computer science}
\fancyfoot[RO,LE]{\sffamily\bfseries\thepage}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{0pt}

\usepackage[margin=1in]{geometry}
\usepackage{float}
\usepackage{subcaption}
\usepackage{graphicx}
\usepackage[noend]{algpseudocode}

%-------- Title --------%

\title{\vspace{-\baselineskip}\sffamily\bfseries Reflection}
\author{
	\makebox[.25\linewidth]{Sergio van Amerongen}\\0952200 \and
	\makebox[.25\linewidth]{Stefan Cloudt}\\0940775 \and
	\makebox[.25\linewidth]{Daan de Graaf}\\0956112 \and
	\makebox[.25\linewidth]{Robert van Lente}\\0953343 \and
	\makebox[.25\linewidth]{Tom Peters}\\0948730 \and
	\makebox[.25\linewidth]{Berrie Trippe}\\0948147 
	\and \makebox[.75\linewidth]{\textbf{Responsible:}} \and
	Stefan Cloudt\\ \tt{s.d.cloudt@student.tue.nl}
}
\date{\today}

%-------- Document --------%
\begin{document}
\maketitle
\section{Introduction}
The goal of this project was to create a sorting machine that sorts black and white discs. Where the majority of the other groups used Fisher Technik and the PP2 processor, we were given the opportunity to participate in a pilot program, where we would build a similar machine using the latest Lego Mindstorms kit. This had both advantages and disadvantages, both of which will be outlined in this document. 

\section{Advantages}
\begin{itemize}
    \item \textbf{Programming:} Since the EV3 brick is much more advanced than the PP2-processor, we were able to install the dedicated leJOs platform. This makes it possible to program the EV3 in Java. This is a great advantage over the PP2, since the PP2 can only be programmed in Assembly, which is considerably more difficult and less manageable. Especially the object oriented paradigm proved to be essential in realising the software of our machine.
    \item \textbf{Motor control:} The leJOs API provides an interface which allowed us to precisely control the motor in our machine. Not only does this provide more accuracy than the PP2's motors, it also meant that we did not need to implement pulse-width modulation.
    \item \textbf{LCD Display:} The EV3 brick contains a built-in LCD display which can be accessed through the API. This allowed us to create a simple GUI for our system, which is extremely difficult on the 7-segment display of PP2.
\end{itemize}

\section{Practical Inconveniences}
There are some minor inconveniences we experienced using the Mindstorms set:

\begin{itemize}
    \item \textbf{SD-card:} In order to setup the LeJOS platform an SD card is needed due to limited storage space on the EV3.
    \item \textbf{Lockers are too small:} The lockers provided are too small for storing the machine and the two boxes the set comes in. Furthermore, it is not possible to put the box into the locker in a horizontal position. The disadvantage of this is that the user of the set needs to check whether or not the box is properly closed. If the box is not properly closed, then the Lego parts will fall out of the box.
\end{itemize}

\section{Disadvantages}
\begin{itemize}
    \item \textbf{Few sensors:} The Lego set contains a rather limited number of useful sensors.  Apart from the two touch sensors, there is only one sensor of each type. This made implementing error checking difficult, as the single colour sensor was already used for sorting. 
    \item \textbf{Inaccurate sensors:} The sensors provided are not optimised for small plastic discs. Hence, we were unable to use the touch sensors and the ultrasonic sensor, as they were unable to detect the small, lightweight discs. This forced us to use the gyroscope, which turned out to be unreliable, as the detected values would rapidly drift for no apparent reason. Even the colour sensor itself proved so unreliable that we had to implement a calibration sequence to make it work correctly under different lighting conditions.
    \item \textbf{Difficult to build with Lego:} Though Lego is quite easy to build with, it proved difficult to use Lego for certain parts of the sorting machine. For example, it is quite a challenge to create a tube to store the discs in, since the dimensions of the discs differ from the achievable dimensions of Lego constructions. This also forced us to place the colour sensor underneath the platform instead of to the side, as it could not be attached in such a way that it was able to detect the discs.
    \item \textbf{No assembly:} Since we could write our software in Java, there was no need for us to use assembly. This means that many of the other groups are now more proficient in the assembly language than any of us. How much of a disadvantage this is is debatable.
    \item \textbf{LeJOS is beta software: } The leJOS platform is still in its beta release, which caused many problems.
		\begin{itemize}
            \item The platform lacks documentation. Lacking documentation makes it difficult to solve bugs in the code. Also the coding itself gets a lot more difficult when one does not exactly know how one can use the API.
            \item It does not detect disconnected cables. Removing a cable during runtime does not raise an exception, even when accessing the peripheral. The system will raise an exception if a peripheral is disconnected when it starts the program though.
            \item Semi-connected peripherals also do not raise an exception, even during start up, and cause strange behaviour. This caused problems during coding. In our case this resulted in the motor turning non-stop while it was only supposed to make half a turn. It took hours before we discovered that the motor simply was not plugged in fully, and our software was actually correct. 
            \item There is a memory leak in leJOs. The memory usage keeps growing during runtime, even for simple programs. We suspect this is either caused by the garbage collector of the Java Runtime Environment running on the EV3, or some part of leJOS, like the sound system or the display system, since our software does not allocate much memory. Even with a simple program running, 600\% of the available RAM is used, meaning 5/6 memory blocks are swapped to disk, causing noticeable slow-downs.
    	\end{itemize}
\end{itemize}

\section{Conclusion}
While the Mindstorms EV3 set provides many advantages, there are also many disadvantages to its use. Many problems surfaced from the usage of leJOS. However, leJOS is not the only software that runs on the EV3. An alternative would be RobotC, which runs the C programming language, and perhaps the problems we encountered using leJOs are not present in RobotC. 

Another disadvantage is the problems we encountered with the incompatibility of the discs with the Lego. From the storage tube to the sensor interaction, we were constantly adapting the design to try to fix this incompatibility. We would definitely recommend using a more appropriate disc size. In addition, heavier discs would increase reliability of some of the sensor.

The lack of usable sensors was also a problem, as it heavily limits the options you have for error detection. Heavier discs could solve the reliability issue for some sensors. However, we still recommend providing more sensors to increase diversity in design.
 
Despite the problems during the design process, we did finally manage to construct a sorting machine using the Lego set that performs above average. Hence, using the Lego set is by no means a limiting factor, provided the group is capable of overcoming the difficulties.

So while it is certainly possible to create a working sorting machine, we believe a different challenge would be more appropriate. The EV3 kit was designed with a strong focus on moving robots that can explore their environment, so adapting the assignment to allow such a robot would yield much more interesting results, as groups would be able to focus on adding features to their machine, instead of crafting convoluted solutions and attempting all sorts of hacks just to get the sensors to work reliably.

Nevertheless, we must admit that it was also a nice challenge to push to provided sensors to their limits.
\end{document}
